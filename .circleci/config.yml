version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.4.0
  aws-eks: circleci/aws-eks@1.1.0


commands:
  install-aws:
    description: Install awscli using pip
    steps:
      - run:
          name: Install aws cli
          command: |
            if (aws --version)
            then 
              export AWSV=$(aws --version | cut -d/ -f2 | cut -d. -f1)
              if  [ $(($AWSV>1)) ]
              then
                echo Already Installed!
              else
                sudo rm -rf /usr/local/aws
                sudo rm /usr/local/bin/aws  
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                aws --version
            fi 
            else
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws --version
            fi

jobs:
  Linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run Lint
          command: |
            . venv/bin/activate
            make lint
            
  Testing:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run Test
          command: |
            . venv/bin/activate
            make test

  Push Docker Container To Dockerhub Repo:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker build --tag=capstone-project-$CIRCLE_WORKFLOW_ID .
            # List docker images
            docker image ls
            dockerpath=sayyedmo/capstone-project
            # Authenticate & tag
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            echo "Docker ID and Image: $dockerpath"
            docker tag capstone-project-$CIRCLE_WORKFLOW_ID sayyedmo/capstone-project
            # Push image to a docker repository
            docker push sayyedmo/capstone-project

  Create EKS Cluster:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install EKSCTL Tool
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.83.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create EKS Cluster
          command: |
            eksctl create cluster \
            --name production-$CIRCLE_WORKFLOW_ID \
            --region $AWS_DEFAULT_REGION \
            --nodegroup-name worker-node-$CIRCLE_WORKFLOW_ID \
            --node-type t3.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2

  Deployment To EKS:
    machine:
      image: ubuntu-2004:202111-01
    working_directory: ~/repo
    steps:
      - checkout
      - install-aws
      - run:
          name: pull image from repo
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker pull sayyedmo/capstone-project
            echo "<-- IMAGE PULLED! --> "
      - run:
          name: aws iam auth
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
      - run:
          name: deploy cluster
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name production-$CIRCLE_WORKFLOW_ID
            kubectl version --client
            export KUBECONFIG=~/.kube/config
            kubectl apply -f eks/k8s-deploy.yml
            echo "<-- CLUSTER DEPLOYED! --> "
            kubectl apply -f eks/k8s-service.yml
            echo "<-- Loadbalancer service --> "
            kubectl get svc
            echo "<-- CLUSTER DEPLOYED! --> "
            echo "<-- CLUSTER NODES --> "
            kubectl get nodes
            echo "<-- CLUSTER PODS --> "
            kubectl get pods --all-namespaces

workflows:
  Default:
    jobs:
      - Linting
      - Testing:
          requires: [ Linting ]
      - Push Docker Container To Dockerhub Repo:
          requires: [ Testing ]
      - Create EKS Cluster:
          requires: [ Push Docker Container To Dockerhub Repo ]
      - Deployment To EKS:
          requires: [ Create EKS Cluster ]
